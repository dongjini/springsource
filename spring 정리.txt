* 서버 오류 코드 : 200(ok), 404(not found), 500(서버쪽 오류)

서버단 작성 프로그램
     1) spring framework : 웹 개발할 때 주로 사용 / 설정 작업 많음 / 
     2) spring boot : spring framework 를 간편화 시킨 버전

* a 태그에서 hre="" 대신 th:href="" 를 사용한다 (내부망에서는 괜찮지만 나중에 서버를 이용할때 문제가 발생 할 수 있기 때문)


프로젝트 생성 시
     1. 빌드 툴 설정
         build : 프로젝트 생성, 라이브러리 설정, 컴파일, 테스트, 패키지 작성, 배포
             1) gradle : text 기반, 후발주자(maven 개선)
             2) maven : XML 기반, 


     2. spring boot version 선택 (버전마다 코드가 조금식 다름, 버전 중요) -> 지금 사용중인 ver 3.4.4
     3. 언어선택
     4. 패키지명 : com.example.demo (자유롭게 지정 가능, but 3개 정도는 써야함 o.o.o)
     5. 패키징타입 : jar(java 압축파일), war(자바 웹 압축파일 - jsp 사용시)
     6. 자바버전선택 : 부트버전에 따라 선택이 달라질 수 있음
     7. 필요 라이브러리 선택 : 
             -> Spring Web, dev tools, thymeleaf, lombok, spring data jpa, 

화면(front) 단 작성 : html + css + javascript + java
     1) jsp 활용 : *.jsp(확장자)
         html 코드 + 자바코드 동시 작성
         spring boot 에서 사용하기 위해서는 설정 작업 필요

     2) 템플릿 엔진 활용 : *.html
         thymeleaf, mustache, groovy, freemaker, velocity

스프링 주요 개념
     1) IoCc(Invesion of Control) : 메소드나 객체의 호출 작업을 개발자가 결정하는 것이 아니라 외부(스프링컨테이너)에서 결졍(제어의 역전)

         class A {}
         class B {
            A obj = new A();
         }

         컨테이너는 어느 객체를 생성할 것인지 알아야 함 => 어노테이션으로 알려주기
         - 컨테이너가 생성한 객체 : bean
         - 싱글톤 방식(객체는 하나만 생성)으로 객체 생성
         - @Controller, @Service, @Component, @RequestMapping("반복되는거")

         @Log4j2 -> log.info(" "); 사용할 수 있음 (sysout)

     2) 경로 임의로 생성 
         http://localhost:8080/ ==> Controller 파일의 메소드와 매핑

         - uri 설계
             ex) 게시판 개발
                 게시글 작성 : /board/create
                 게시글 목록 : /board/list
                 게시글 조회 : /board/read
                 게시글 수정 : /board/update

         @RequestMapping("/board")
         public String method() {
         @GetMapping("/create")
            return "info";
         }
         - String 일 때
             http://localhost:8080/board/create -> 브라우저에서 요청 => 컨트롤러 응답 => templates 찾기 (templates / return 값 찾기)
             => templates / info.html 작성


         @GetMapping("/update")
         public void method() {

         }
         void 일 때
         http://localhost:8080/board/update -> 브라우저에서 요청 => 컨트롤러 응답 => templates 찾기 (templates / board / update)
             => templates / board / update.html 작성

     3) 내장 서버 : Tomcat(설치 후 사용 - 스프링부트를 사용한다면 내장되어 있음)
         http://localhost:8080/ : Tomcat 서버 구동 시 기본경로

         브라우저를 통해 http, https 프로토콜에 응답하는 서버 : SW웹서버(apache, NginX)  
         WAS(Web Application Server) : 웹서버 + 자바해석 => Tomcat

     * a 태그로 들어가는 방식 -> get 방식
         post 들어오면 post매핑을 해야함.

     4) 오류발생
         - 404 : 컨트롤러 경로 확인
         - 405 : 컨트롤러 경로 + 매핑방식 확인

     * 자바에 있는 값을 보여주는 방법 
         (1) <div id="result" th:text="${result}"> => th:text="${result} : 자바 코드를 화면단에 출력화기 위한 코드
         (2) <!-- command 객체명 : 첫 문자만 소문자로 바꿔서  -->
             <li>아이디 : [[${loginDTO?.userid}]]</li>
             <li>비밀번호 : [[${loginDTO?.password}]]</li>

     5) 사용자 입력값 가져오기
         (1) 변수 이용 : 타입 지정 가능, 변수명은 form 요소의 이름과 일치
         (2) 커맨드(DTO) 객체 이용 : 타입 지정 가능, 변수명은 form 요소의 이름과 일치
                                     커맨드 객체 사용시 장점은 template 페이지까지 입력값이 유지
         (3) HttpServleRequest 이용
                     HttpServleRequest request : 사용자의 정보 및 서버 쪽 정보 추출


     6) @ModelAttribute 
         - 별칭
         - model.addAttribute("num1", num1) == @ModelAttribute("num1") : template 페이지에서 값을 유지하고 싶다면

     7) RedirectAttributes : 컨트롤러에서 움직이는 방식이 redirect 일 때 사용 / 움직이면서 특정 값을 가지고 가고 싶을 때 사용
                 - rttr.addAttribute("userid", memberDTO.getUserid()); 
                   rttr.addAttribute("userid", "10");   =>  ?userid=10  => 템플릿 $[param.userid]

                 - rttr.addFlashAttribute("password", memberDTO.getPassword());
                   rttr.addFlashAttribute("password", "12"); => session 객체에 담는것과 같은 방식 => 템플릿 $[password]
     
         * // 로그인 페이지로 이동
             - return "redirect:/member/login";
                     redirect + 주소를 주면 원하는 페이지로 리턴 됨.

     8) 데이터 유지하기 
         - login.html 입력값 => 컨트롤러 => logout.html까지 입력값 유지를 하고싶다면?
             - foward 방식 : 커맨드 객체, ModelAttribute( or @ModelAttribute), Model
             - redirect 방식 : RedirectiAttributes 이용
             
         - login.html 입력값   => 컨트롤러 => 모든 페이지에서 입력값 유지를 하고싶다면?
             - 세션(로그인) : 값을 서버쪽에 저장함(객체 형태로 담는 것 가능)
                      HttpSession 을 이용해 저장 => 필요없는 경우 제거 or 현재 세션이 유지되고 있는 브라우저를 닫으면 종료됨
             - 쿠키 : 값을 클라이언트 브라우저로 전송 후 저장

         - login.html 입력값 => 컨트롤러 => 다른 페이지에서 입력값 소멸?
             - 컨트롤러에서 변수로 받아오는 경우 입력값은 소멸됨.

         * 어느 페이지로(template) 이동을 하던지 간에 name 유지시키고 싶다면
             커맨드 객체, ModelAttribute( or @ModelAttribute)

         * redirect 로 움직이는데 값 유지하고 싶다면?
             rttr.addAttribute("name", name);
             rttr.addFlashAttribute("name", name);
             return "redirect:/board/list";


*  <!-- 리스트 출력 -->
    <ul>
      <li th:each=" dto : ${list}" th:text="${dto}"></li>

배포 : 실제 서버에 프로그램을 올리는 작업 
        - http://localhost:8080/ 로컬
        - http://도메인주소/app/member/login => 특정 폴더 밑에 배포가 될 수도 있다
             -> <a th:href="@{}"> 를 사용함.

        - th:href 나 href 경로는 똑같이 표현, 파라메터를 보내는 방법이 달라짐.
             href : member/login?id=hong   
             th:href : /member/login(id='hong')
                      th:href="@{/ex1(param1='data1',param2=10)}" => /ex1?param1=data&param2=10

* 날짜 포멧
           <li th:text="${#dates.format(now, 'yyyy-MM-dd')}"></li>    = > date 날짜 포멧
           <td th:text="${#temporals.format(dto.regDateTime, 'yyyy-MM-dd hh:mm')}"></td>  => 로컬 날짜 포멧


* 경로 설정
     http://localhost:8080/  고정

     href 경로 설정 시 현재경로(주소줄에 있는 경로)

     현재경로 : http://localhost:8080/sample

         th:href="@{ex2(id=${dto.id})}"   => / 를 안붙이면 현재 경로에서 맨마지막 경로 대체 하면서 주소가 설정됨.
         th:href="@{/ex2(id=${dto.id})}"  => / 붙이면 http://localhost:8080/ 다음 부터 경로 설정 됨.

     움직일 경로 : http://localhost:8080/ex1


데이터베이스 작업 => 프레임워크
     1. MyBatis
     2. JPA : 객체 == 테이블
         - JPA 기술을 구현한 Hibernate 구현체가 존재    

        * 데이터 베이스 초기화 전략
            spring.jpa.hibernate.ddl-auto=create
             1) create : 기존 테이블 삭제 후 테이블 생성(개발시)
             2) create-drop : 기존 테이블 삭제 후 테이블 생성, 종료 시점에 테이블 삭제(개발시)
             3) update : 변경된 부분만 적용(개발시)
             4) validate : 엔티티와 테이블 정상 매핑 확인(스테이징, 운영환경)
             5) none : 사용하지 않음(스테이징, 운영환경)

             Entity 명이 테이블명으로 사용됨(기본)
                 @Table(name = "studenttbl") : Entity 명이 아닌 지정된 이름으로 테이블 생성
             ---------------------------------------------------------------------------------------------
             DB가 오라클인 경우

             @GeneratedValue create sequence studenttbl_seq start with 1 increment by 50
             @GeneratedValue(strategy = GenerationType.AUTO)     ->      increment by 50
             ---------------------------------------------------------------------------------------------

             @GeneratedValue(strategy = GenerationType.IDENTITY) -> generated by default as identity
                         -> increment by 1

             sequence를 사용하고 싶으면 2개를 같이 써야함.
             @SequenceGenerator(name = "student_seq_gen", sequenceName = "student_seq", allocationSize = 1)
             @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "student_seq_gen")
                         -> create sequence student_seq start with 1 increment by 1
             ----------------------------------------------------------------------------------------------


        * @Column(name = "sname", length = 100, nullable = false, unique = true)
          @Column(name = "sname", columnDefinition = "varchar2(20) not null unique")
                -> sname varchar2(20) not null unique

        * 날짜 어노테이션
             org.hibernate 제공
             @CreationTimestamp : 데이터 삽입 시 자동으로 현재 시스템 날짜 시간 삽입
             @UpdateTimestamp : 데이터 삽입 + 수정시 자동으로 현재 날짜 시간 삽입

             org.springframework.data 제동
             @CreatedDate
             @LastModifiedDate

             + 설정작업 필요
                 main이 있는 클래스에 @EnableJpaAuditing 부착
                 Entity 클래스에 @EntityListeners(value = AuditingEntityListener.class) 부착


* JPA 
     - ORM(Object Relational Mapping) : 데이터베이스와 객체지향을 한 번에 처리하기 위한 개념
     - Hibernate : jpa 스펙을 구현해 낸 구현체



